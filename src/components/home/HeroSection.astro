<section class="section hero-section" id="hero">
  <div id="container" aria-hidden="true"></div>
  <div id="stats" style="display: none;"></div>
  <div id="ui-container"></div>
  
  <!-- Loading indicator for 3D background -->
  <div class="hero-3d-loading" aria-hidden="true">
    <div class="loading-spinner"></div>
  </div>

  <header class="hero-header">
    <div class="logo-container" aria-hidden="true">
      <div class="logo-circles">
        <div class="circle circle-1"></div>
        <div class="circle circle-2"></div>
      </div>
    </div>
    <div class="center-logo">
      <div id="logo-text" role="presentation">Nexus.</div>
    </div>
  </header>

  <div class="hero">
    <span class="hero-tag">üìç Baarn ‚Ä¢ Websites & Online Marketing</span>
    <h1>Jouw bedrijf verdient<br />een website die werkt.</h1>
    <p class="hero-summary">
      Geen templates. Geen maanden wachten. Wij bouwen snelle websites die jouw diensten helder uitleggen en nieuwe klanten binnenhalen. <strong style="color: rgba(99, 102, 241, 0.95);">In 2-4 weken online.</strong>
    </p>
    
    <div class="hero-proof-simple">
      <div class="hero-proof-item">
        ‚úì Snelle websites die makkelijk te vinden zijn
      </div>
      <div class="hero-proof-item">
        ‚úì Marketing die nieuwe aanvragen oplevert
      </div>
      <div class="hero-proof-item">
        ‚úì E√©n vast team, geen verrassingen
      </div>
    </div>

    <div class="hero-actions">
      <a href="/contact" class="hero-btn hero-btn--primary">
        <span>Plan een gesprek</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M5 12h14M12 5l7 7-7 7"/>
        </svg>
      </a>
            <a href="#cases" class="hero-btn hero-btn--ghost">Bekijk eerdere projecten</a>
      <!-- Button to explicitly enable the 3D animation (desktop only). Hidden by default to avoid adding to critical path. -->
      <button id="enable-hero-btn" class="hero-btn hero-btn--secondary" style="display: none;">Schakel animatie in</button>
    </div>
  </div>
</section>

<script>
  // Enhanced device capability detection
  function hasWebGLSupport() {
    try {
      const canvas = document.createElement('canvas');
      return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
    } catch (e) {
      return false;
    }
  }
  
  // Test GPU performance with a quick render test
  async function testGPUPerformance(): Promise<boolean> {
    try {
      const canvas = document.createElement('canvas');
      canvas.width = 32;
      canvas.height = 32;
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      if (!gl) return false;
      
      // Quick render test
      const start = performance.now();
      (gl as WebGLRenderingContext).clear((gl as WebGLRenderingContext).COLOR_BUFFER_BIT);
      (gl as WebGLRenderingContext).finish();
      const renderTime = performance.now() - start;
      
      // If even a simple clear takes >5ms, GPU is struggling
      return renderTime < 5;
    } catch {
      return false;
    }
  }
  
  // SIMPLE: Load 3D on desktop, skip on mobile
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  const isTablet = /iPad|Android/i.test(navigator.userAgent) && window.innerWidth >= 768 && window.innerWidth <= 1024;
  const enableBtn = document.getElementById('enable-hero-btn');

  async function loadHeroOnDemand() {
    console.log('[hero] üì¶ loadHeroOnDemand() STARTED');
    try {
      // Hide the button to avoid duplicate clicks
      if (enableBtn) enableBtn.style.display = 'none';

      // Optional GPU quick test before importing heavy code
      console.log('[hero] Testing GPU performance...');
      const gpuOk = await testGPUPerformance();
      console.log('[hero] GPU test result:', gpuOk);
      if (!gpuOk) console.log('[hero] ‚ö†Ô∏è  GPU quick test suggests low perf ‚Äî animation may fallback');

      // Dynamic import only when user explicitly requests it
      console.log('[hero] üì• Importing nexusHero module...');
      const module = await import('../../scripts/nexusHero');
      console.log('[hero] ‚úÖ Module imported:', module);
  const modAny = module;
  // call whichever exported initializer exists; cast to any-ish behavior to silence strict typings in the inline script
  const cleanup = (typeof (modAny as any).default === 'function') ? (modAny as any).default() : (typeof (modAny as any).initNexusHero === 'function' ? (modAny as any).initNexusHero() : null);

      // Mark as loaded for styles or other adjustments
      setTimeout(() => document.querySelector('.hero-section')?.classList.add('hero-loaded'), 500);

      // Hide loading spinner when animation started
      const spinner = document.querySelector('.hero-3d-loading');
      if (spinner) (spinner as HTMLElement).style.display = 'none';

      // Monitor a lightweight FPS indicator and fallback if needed (non-blocking)
      let lowFPSCount = 0;
      const fpsCheck = setInterval(() => {
        const statsEl = document.getElementById('stats');
        if (!statsEl) return;
        const fps = parseInt(statsEl.textContent || '0') || 0;
        if (fps > 0 && fps < 15) {
          lowFPSCount++;
          if (lowFPSCount >= 5) {
            clearInterval(fpsCheck);
            if (cleanup) cleanup();
            document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
          }
        } else {
          lowFPSCount = 0;
        }
      }, 2000);

      setTimeout(() => clearInterval(fpsCheck), 30000);
    } catch (err) {
      console.warn('[hero] user-initiated load failed, falling back to static background', err);
      document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
      if (enableBtn) enableBtn.style.display = 'none';
    }
  }

  // BRUTAL DEBUG
  console.log('[hero] ========================');
  console.log('[hero] isMobile:', isMobile);
  console.log('[hero] isTablet:', isTablet);
  console.log('[hero] window.innerWidth:', window.innerWidth);
  console.log('[hero] navigator.userAgent:', navigator.userAgent);
  console.log('[hero] ========================');
  
  // DESKTOP = load, MOBILE/TABLET = skip
  if (!isMobile && !isTablet) {
    console.log('[hero] ‚úÖ DESKTOP DETECTED');
    console.log('[hero] enableBtn:', enableBtn);
    
    if (enableBtn) {
      console.log('[hero] Hiding enable button');
      enableBtn.style.display = 'none';
    }
    
    // Show spinner
    const spinner = document.querySelector('.hero-3d-loading');
    console.log('[hero] Spinner element:', spinner);
    if (spinner) {
      console.log('[hero] Showing spinner');
      (spinner as HTMLElement).style.display = 'block';
    }
    
    // LOAD IMMEDIATELY
    console.log('[hero] üöÄ Calling loadHeroOnDemand()...');
    try {
      loadHeroOnDemand();
      console.log('[hero] ‚úÖ loadHeroOnDemand() called');
    } catch (err) {
      console.error('[hero] ‚ùå ERROR calling loadHeroOnDemand:', err);
    }
  } else {
    console.log('[hero] ‚ùå MOBILE/TABLET DETECTED');
    document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
    const spinner = document.querySelector('.hero-3d-loading');
    if (spinner) (spinner as HTMLElement).style.display = 'none';
  }
</script>
