<section class="section hero-section" id="hero">
  <div id="container" aria-hidden="true"></div>
  <div id="stats" style="display: none;"></div>
  <div id="ui-container"></div>
  
  <!-- Loading indicator for 3D background -->
  <div class="hero-3d-loading" aria-hidden="true">
    <div class="loading-spinner"></div>
  </div>

  <header class="hero-header">
    <div class="logo-container" aria-hidden="true">
      <div class="logo-circles">
        <div class="circle circle-1"></div>
        <div class="circle circle-2"></div>
      </div>
    </div>
    <div class="center-logo">
      <div id="logo-text" role="presentation">Nexus.</div>
    </div>
  </header>

  <div class="hero">
    <span class="hero-tag">üìç Baarn ‚Ä¢ Websites & Online Marketing</span>
    <h1>Jouw bedrijf verdient<br />een website die werkt.</h1>
    <p class="hero-summary">
      Geen templates. Geen maanden wachten. Wij bouwen snelle websites die jouw diensten helder uitleggen en nieuwe klanten binnenhalen. <strong style="color: rgba(99, 102, 241, 0.95);">In 2-4 weken online.</strong>
    </p>
    
    <div class="hero-proof-simple">
      <div class="hero-proof-item">
        ‚úì Snelle websites die makkelijk te vinden zijn
      </div>
      <div class="hero-proof-item">
        ‚úì Marketing die nieuwe aanvragen oplevert
      </div>
      <div class="hero-proof-item">
        ‚úì E√©n vast team, geen verrassingen
      </div>
    </div>

    <div class="hero-actions">
      <a href="/contact" class="hero-btn hero-btn--primary">
        <span>Plan een gesprek</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M5 12h14M12 5l7 7-7 7"/>
        </svg>
      </a>
            <a href="#cases" class="hero-btn hero-btn--ghost">Bekijk eerdere projecten</a>
    </div>
  </div>
</section>

<script>
  // Enhanced device capability detection
  function hasWebGLSupport() {
    try {
      const canvas = document.createElement('canvas');
      return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
    } catch (e) {
      return false;
    }
  }
  
  // Test GPU performance with a quick render test
  async function testGPUPerformance(): Promise<boolean> {
    try {
      const canvas = document.createElement('canvas');
      canvas.width = 32;
      canvas.height = 32;
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      if (!gl) return false;
      
      // Quick render test
      const start = performance.now();
      (gl as WebGLRenderingContext).clear((gl as WebGLRenderingContext).COLOR_BUFFER_BIT);
      (gl as WebGLRenderingContext).finish();
      const renderTime = performance.now() - start;
      
      // If even a simple clear takes >5ms, GPU is struggling
      return renderTime < 5;
    } catch {
      return false;
    }
  }
  
  // Nexus 3D Hero Background - Now loads on ALL devices with adaptive quality
  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
  
  // Only skip if user explicitly disabled motion
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  const smallViewport = window.innerWidth < 900;
  const shouldSkipHero = prefersReducedMotion.matches || !hasWebGLSupport() || isMobile || smallViewport;

  if (!shouldSkipHero) {
    const loadHero = async () => {
      try {
        // Test GPU before loading heavy 3D
        const gpuOk = await testGPUPerformance();
        
        if (!gpuOk) {
          console.log('[hero] GPU test failed, using lightweight version');
        }
        
        // Dynamic import - the script now auto-adapts based on device capabilities
        import('../../scripts/nexusHero').then(module => {
          const cleanup = module.default();
          
          // Mark as loaded
          setTimeout(() => {
            document.querySelector('.hero-section')?.classList.add('hero-loaded');
          }, 500);
          
          // Monitor for issues and fallback if needed
          let lowFPSCount = 0;
          const fpsCheck = setInterval(() => {
            const statsEl = document.getElementById('stats');
            if (statsEl) {
              const fpsText = statsEl.textContent || '';
              const fps = parseInt(fpsText);
              
              if (fps > 0 && fps < 15) {
                lowFPSCount++;
                if (lowFPSCount >= 5) {
                  console.log('[hero] Consistently low FPS, showing fallback');
                  clearInterval(fpsCheck);
                  if (cleanup) cleanup();
                  document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
                }
              } else {
                lowFPSCount = 0;
              }
            }
          }, 2000);
          
          // Clean up check after 30 seconds
          setTimeout(() => clearInterval(fpsCheck), 30000);
        }).catch(err => {
          console.warn('[hero] Failed to load 3D background, using fallback', err);
          document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
        });
      } catch (err) {
        console.warn('[hero] init failed, falling back to static background', err);
        document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
      }
    };

    // Defer heavy hero init until after page load or during idle time to avoid blocking LCP
    const scheduleHeroLoad = () => {
      if ('requestIdleCallback' in window) {
        (window as any).requestIdleCallback(() => loadHero(), { timeout: 1200 });
      } else {
  // Fallback: wait for window load then a short timeout
  (window as any).addEventListener('load', () => setTimeout(loadHero, 800), { once: true });
      }
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', scheduleHeroLoad, { once: true });
    } else {
      scheduleHeroLoad();
    }
  } else {
    // Apply static fallback immediately if motion disabled or no WebGL
    document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
  }
</script>
