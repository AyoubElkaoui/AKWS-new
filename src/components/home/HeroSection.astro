<section class="section hero-section" id="hero">
  <div id="container" aria-hidden="true"></div>
  <div id="stats" style="display: none;"></div>
  <div id="ui-container"></div>
  
  <!-- Loading indicator for 3D background -->
  <div class="hero-3d-loading" aria-hidden="true">
    <div class="loading-spinner"></div>
  </div>

  <header class="hero-header">
    <div class="logo-container" aria-hidden="true">
      <div class="logo-circles">
        <div class="circle circle-1"></div>
        <div class="circle circle-2"></div>
      </div>
    </div>
    <div class="center-logo">
      <div id="logo-text" role="presentation">Nexus.</div>
    </div>
  </header>

  <div class="hero">
    <span class="hero-tag">üìç Baarn ‚Ä¢ Websites & Online Marketing</span>
    <h1>Jouw bedrijf verdient<br />een website die werkt.</h1>
    <p class="hero-summary">
      Geen templates. Geen maanden wachten. Wij bouwen snelle websites die jouw diensten helder uitleggen en nieuwe klanten binnenhalen. <strong style="color: rgba(99, 102, 241, 0.95);">In 2-4 weken online.</strong>
    </p>
    
    <div class="hero-proof-simple">
      <div class="hero-proof-item">
        ‚úì Snelle websites die makkelijk te vinden zijn
      </div>
      <div class="hero-proof-item">
        ‚úì Marketing die nieuwe aanvragen oplevert
      </div>
      <div class="hero-proof-item">
        ‚úì E√©n vast team, geen verrassingen
      </div>
    </div>

    <div class="hero-actions">
      <a href="/contact" class="hero-btn hero-btn--primary">
        <span>Plan een gesprek</span>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M5 12h14M12 5l7 7-7 7"/>
        </svg>
      </a>
            <a href="#cases" class="hero-btn hero-btn--ghost">Bekijk eerdere projecten</a>
      <!-- Button to explicitly enable the 3D animation (desktop only). Hidden by default to avoid adding to critical path. -->
      <button id="enable-hero-btn" class="hero-btn hero-btn--secondary" style="display: none;">Schakel animatie in</button>
    </div>
  </div>
</section>

<script>
  // Enhanced device capability detection
  function hasWebGLSupport() {
    try {
      const canvas = document.createElement('canvas');
      return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));
    } catch (e) {
      return false;
    }
  }
  
  // Test GPU performance with a quick render test
  async function testGPUPerformance(): Promise<boolean> {
    try {
      const canvas = document.createElement('canvas');
      canvas.width = 32;
      canvas.height = 32;
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      if (!gl) return false;
      
      // Quick render test
      const start = performance.now();
      (gl as WebGLRenderingContext).clear((gl as WebGLRenderingContext).COLOR_BUFFER_BIT);
      (gl as WebGLRenderingContext).finish();
      const renderTime = performance.now() - start;
      
      // If even a simple clear takes >5ms, GPU is struggling
      return renderTime < 5;
    } catch {
      return false;
    }
  }
  
  // Nexus 3D Hero Background - explicit activation only
  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  const smallViewport = window.innerWidth < 900;

  // Only offer the animation on capable desktop devices; otherwise use static fallback immediately
  const eligibleForAnimation = !prefersReducedMotion.matches && hasWebGLSupport() && !isMobile && !smallViewport;

  // Allow explicit override via URL `?force-animate=1` or global `window.AKWS_FORCE_ANIMATIONS = true`
  let forceAnimate = false;
  try {
    const url = new URL(window.location.href);
    if (url.searchParams.get('force-animate') === '1') forceAnimate = true;
    // @ts-ignore
    if (window.AKWS_FORCE_ANIMATIONS) forceAnimate = true;
  } catch (e) {
    // ignore
  }

  // Utility: show the enable button (desktop only) and attach click handler to load the heavy module on demand
  const enableBtn = document.getElementById('enable-hero-btn');

  async function loadHeroOnDemand() {
    try {
      // Hide the button to avoid duplicate clicks
      if (enableBtn) enableBtn.style.display = 'none';

      // Optional GPU quick test before importing heavy code
      const gpuOk = await testGPUPerformance();
      if (!gpuOk) console.log('[hero] GPU quick test suggests low perf ‚Äî animation may fallback');

      // Dynamic import only when user explicitly requests it
      const module = await import('../../scripts/nexusHero');
  const modAny = module;
  // call whichever exported initializer exists; cast to any-ish behavior to silence strict typings in the inline script
  const cleanup = (typeof (modAny as any).default === 'function') ? (modAny as any).default() : (typeof (modAny as any).initNexusHero === 'function' ? (modAny as any).initNexusHero() : null);

      // Mark as loaded for styles or other adjustments
      setTimeout(() => document.querySelector('.hero-section')?.classList.add('hero-loaded'), 500);

      // Hide loading spinner when animation started
      const spinner = document.querySelector('.hero-3d-loading');
      if (spinner) (spinner as HTMLElement).style.display = 'none';

      // Monitor a lightweight FPS indicator and fallback if needed (non-blocking)
      let lowFPSCount = 0;
      const fpsCheck = setInterval(() => {
        const statsEl = document.getElementById('stats');
        if (!statsEl) return;
        const fps = parseInt(statsEl.textContent || '0') || 0;
        if (fps > 0 && fps < 15) {
          lowFPSCount++;
          if (lowFPSCount >= 5) {
            clearInterval(fpsCheck);
            if (cleanup) cleanup();
            document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
          }
        } else {
          lowFPSCount = 0;
        }
      }, 2000);

      setTimeout(() => clearInterval(fpsCheck), 30000);
    } catch (err) {
      console.warn('[hero] user-initiated load failed, falling back to static background', err);
      document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
      if (enableBtn) enableBtn.style.display = 'none';
    }
  }

  if (eligibleForAnimation && enableBtn) {
    // Show the explicit enable button as a fallback. We will NOT auto-load by default anymore
    // because it hurts LCP/PageSpeed. Auto-load only happens when explicitly forced.
    enableBtn.style.display = 'inline-block';

    // schedule an automatic (deferred) load to provide the expected desktop experience
    const scheduleAutoLoad = () => {
      const startLoad = () => {
        // show spinner briefly while loading
        const spinner = document.querySelector('.hero-3d-loading');
        if (spinner) (spinner as HTMLElement).style.display = 'block';
        loadHeroOnDemand();
      };

      if ('requestIdleCallback' in window) {
        (window as any).requestIdleCallback(startLoad, { timeout: 1200 });
      } else {
        (window as any).addEventListener('load', () => setTimeout(startLoad, 800), { once: true });
      }
    };

    // Auto-load only when explicitly forced (query param or global flag). Otherwise user must click.
    if (forceAnimate) {
      scheduleAutoLoad();
    }

    // Button still allows manual triggering if auto-load hasn't started/failed
    enableBtn.addEventListener('click', () => {
      loadHeroOnDemand();
    }, { once: true });
  } else {
    // Not eligible: keep the static fallback immediately
    document.querySelector('.hero-section')?.classList.add('hero-static-fallback');
    // ensure spinner is hidden for devices that won't load animation
    const spinner = document.querySelector('.hero-3d-loading');
    if (spinner) (spinner as HTMLElement).style.display = 'none';
  }
</script>
